
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  password       String
  firstName      String?
  lastName       String?
  role           Role         @default(USER)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  employee       Employee?
  sessions       Session[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Organization {
  id            String          @id @default(cuid())
  name          String
  users         User[]
  employees     Employee[]
  departments   Department[]
  subscription  Subscription?
  settings      Json?
  leaveRequests LeaveRequest[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Employee {
  id             String         @id @default(cuid())
  userId         String         @unique
  user           User           @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  departmentId   String?
  department     Department?    @relation(fields: [departmentId], references: [id])
  position       String?
  startDate      DateTime?
  leaveBalance   LeaveBalance?
  leaveRequests  LeaveRequest[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Department {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  employees      Employee[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model LeaveRequest {
  id             String       @id @default(cuid())
  employeeId     String
  employee       Employee     @relation(fields: [employeeId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  startDate      DateTime
  endDate        DateTime
  type           LeaveType
  status         LeaveStatus  @default(PENDING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model LeaveBalance {
  id         String   @id @default(cuid())
  employeeId String   @unique
  employee   Employee @relation(fields: [employeeId], references: [id])
  annual     Float    @default(0)
  sick       Float    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Subscription {
  id             String       @id @default(cuid())
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  plan           String
  status         String
  validUntil     DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum Role {
  SUPER_ADMIN
  ORG_ADMIN
  HR_MANAGER
  DEPT_MANAGER
  EMPLOYEE
}

enum LeaveType {
  ANNUAL
  SICK
  UNPAID
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
