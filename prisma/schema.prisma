
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String      @id @default(cuid())
  name        String
  employees   Employee[]
  departments Department[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Department {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  employees      Employee[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Employee {
  id             String                 @id @default(cuid())
  email          String                 @unique
  name           String
  position       String
  organizationId String
  departmentId   String?
  organization   Organization           @relation(fields: [organizationId], references: [id])
  department     Department?            @relation(fields: [departmentId], references: [id])
  onboarding     Onboarding?
  documents      Document[]
  attendance     Attendance[]
  leaves         Leave[]
  qualifications EmployeeQualification[]
  training       EmployeeTraining[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

model EmployeeTraining {
  id                String   @id @default(cuid())
  employeeId        String
  employee          Employee @relation(fields: [employeeId], references: [id])
  title             String
  provider          String
  completionDate    DateTime
  expiryDate        DateTime?
  certificateNumber String?
  status            String
  isNZQAAccredited  Boolean  @default(false)
  complianceCategory String
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([employeeId])
}

model EmployeeQualification {
  id                 String    @id @default(cuid())
  employeeId         String
  employee           Employee  @relation(fields: [employeeId], references: [id])
  title              String
  institution        String
  dateObtained       DateTime
  expiryDate         DateTime?
  verificationStatus String    @default("PENDING")
  notes              String?
  attachments        String[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([employeeId])
}

model Onboarding {
  id           String    @id @default(cuid())
  employeeId   String    @unique
  employee     Employee  @relation(fields: [employeeId], references: [id])
  status       String    @default("PENDING")
  startDate    DateTime
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Document {
  id           String    @id @default(cuid())
  title        String
  fileUrl      String
  employeeId   String
  employee     Employee  @relation(fields: [employeeId], references: [id])
  type         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Attendance {
  id         String    @id @default(cuid())
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id])
  date       DateTime  @db.Date
  clockIn    DateTime
  clockOut   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Leave {
  id         String    @id @default(cuid())
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id])
  type       String
  startDate  DateTime  @db.Date
  endDate    DateTime  @db.Date
  status     String    @default("PENDING")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
