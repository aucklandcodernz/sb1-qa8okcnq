
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  role           String    @default("USER")
  organizationId String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

model Organization {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  employees Employee[]
  documents Document[]
  departments Department[]
}

model Employee {
  id             String    @id @default(cuid())
  firstName      String
  lastName       String
  email          String    @unique
  organizationId String
  departmentId   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  department     Department?  @relation(fields: [departmentId], references: [id])
  documents      Document[]
  attendance     Attendance[]
  leaves         Leave[]
  performance    PerformanceReview[]
  training       TrainingRecord[]
}

model Department {
  id             String    @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  employees      Employee[]
}

model Document {
  id             String    @id @default(cuid())
  title          String
  url            String
  organizationId String
  employeeId     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  employee       Employee?    @relation(fields: [employeeId], references: [id])
}

model Attendance {
  id          String    @id @default(cuid())
  employeeId  String
  checkIn     DateTime
  checkOut    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    Employee  @relation(fields: [employeeId], references: [id])
}

model Leave {
  id          String    @id @default(cuid())
  employeeId  String
  startDate   DateTime
  endDate     DateTime
  type        String
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    Employee  @relation(fields: [employeeId], references: [id])
}

model PerformanceReview {
  id          String    @id @default(cuid())
  employeeId  String
  reviewerId  String
  reviewDate  DateTime
  rating      Int
  comments    String?
  goals       Json?
  skillAssessments Json?
  status      String    @default("DRAFT")
  nextReviewDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    Employee  @relation(fields: [employeeId], references: [id])
  reviewer    Employee  @relation("ReviewerRelation", fields: [reviewerId], references: [id])
  feedback    Feedback[]

  @@index([employeeId, reviewDate])
  @@index([status])
}

model Feedback {
  id          String    @id @default(cuid())
  reviewId    String
  providerId  String
  content     String
  rating      Int?
  createdAt   DateTime  @default(now())
  review      PerformanceReview @relation(fields: [reviewId], references: [id])
  provider    Employee  @relation(fields: [providerId], references: [id])
}

model SafetyIncident {
  id          String    @id @default(cuid())
  reporterId  String
  type        String
  severity    String
  description String
  location    String
  dateOccurred DateTime
  status      String    @default("OPEN")
  resolution  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reporter    Employee  @relation(fields: [reporterId], references: [id])

  @@index([status])
  @@index([dateOccurred])
}

model TrainingCertification {
  id          String    @id @default(cuid())
  employeeId  String
  courseId    String
  certificationNumber String?
  issueDate   DateTime
  expiryDate  DateTime?
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    Employee  @relation(fields: [employeeId], references: [id])
  course      TrainingCourse @relation(fields: [courseId], references: [id])

  @@index([employeeId, status])
  @@index([expiryDate])
}

model TrainingCourse {
  id          String    @id @default(cuid())
  name        String
  description String?
  duration    Int
  required    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  certifications TrainingCertification[]
}

model TrainingRecord {
  id          String    @id @default(cuid())
  employeeId  String
  courseName  String
  completedAt DateTime
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    Employee  @relation(fields: [employeeId], references: [id])
}

// Existing models remain unchanged...
