generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  role           String    @default("USER")
  organizationId String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

model Organization {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  employees Employee[]
  documents Document[]
  departments Department[]
}

model Employee {
  id             String    @id @default(cuid())
  firstName      String    @db.VarChar(50)
  lastName       String    @db.VarChar(50)
  email          String    @unique @db.VarChar(255)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastLoginAt    DateTime?
  version        Int       @default(1)
  status         EmployeeStatus @default(ACTIVE)
  skillAssessments SkillAssessment[]
  createdById    String?
  updatedById    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  position       String    @db.VarChar(100)
  employmentType String    @default("FULL_TIME")
  startDate      DateTime  @default(now())
  endDate        DateTime?
  status         String    @default("ACTIVE")
  statusHistory  EmployeeStatusHistory[]
  departmentHistory DepartmentHistory[]
  auditLogs      AuditLog[]
  lastModifiedBy String?   @map("modified_by")
  lastModifiedAt DateTime  @updatedAt @map("modified_at")
  lastStatusUpdate DateTime @default(now()) @map("status_update")
  version        Int       @default(1)
  
  @@map("employees")
  salary         Decimal?  @db.Decimal(10, 2)
  taxId          String?   @db.VarChar(50)
  phoneNumber    String?   @db.VarChar(20)
  address        Json?
  bankDetails    Json?
  emergencyContact Json?
  kiwiSaverRate  Decimal? @db.Decimal(4, 2)
  taxCode        String?  @db.VarChar(10)
  organizationId String
  departmentId   String?
  managerId      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  department     Department?  @relation(fields: [departmentId], references: [id])
  manager        Employee?    @relation("EmployeeToManager", fields: [managerId], references: [id])
  directReports  Employee[]   @relation("EmployeeToManager")
  documents      Document[]
  attendance     Attendance[]
  leaves         Leave[]
  performance    PerformanceReview[]
  training       TrainingRecord[]
  skills         EmployeeSkill[]
  history        EmploymentHistory[]

  @@index([organizationId])
  @@index([departmentId])
  @@index([email])
}

model EmployeeSkill {
  id              String   @id @default(cuid())
  employeeId      String
  name            String
  proficiencyLevel Int
  lastUsed        DateTime?
  employee        Employee @relation(fields: [employeeId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([employeeId])
}

model EmploymentHistory {
  id          String   @id @default(cuid())
  employeeId  String
  position    String
  startDate   DateTime
  endDate     DateTime?
  department  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([employeeId])
}

model Department {
  id             String    @id @default(cuid())
  name           String
  organizationId String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  employees      Employee[]
}

model Document {
  id             String    @id @default(cuid())
  title          String
  url            String
  organizationId String
  employeeId     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  employee       Employee?    @relation(fields: [employeeId], references: [id])
}

model Attendance {
  id          String    @id @default(cuid())
  employeeId  String
  checkIn     DateTime
  checkOut    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    Employee  @relation(fields: [employeeId], references: [id])
}

model Leave {
  id          String    @id @default(cuid())
  employeeId  String
  startDate   DateTime
  endDate     DateTime
  type        String
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    Employee  @relation(fields: [employeeId], references: [id])
}

model PerformanceReview {
  id          String    @id @default(cuid())
  employeeId  String
  reviewerId  String
  reviewDate  DateTime
  rating      Int
  comments    String?
  goals       Json?
  skillAssessments Json?
  status      String    @default("DRAFT")
  nextReviewDate DateTime?
  completedAt DateTime?
  category    String    @default("ANNUAL")
  score       Decimal   @default(0) @db.Decimal(3,2)
  improvement String[]
  metrics     Json?     @default("{}")
  acknowledgement Boolean @default(false)
  discussionNotes String?
  lastReminderSent DateTime?
  reviewCycle String?
  department  String?
  overallPerformance String?
  competencies Json?
  developmentPlans Json?
  achievements Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    Employee  @relation(fields: [employeeId], references: [id])
  reviewer    Employee  @relation("ReviewerRelation", fields: [reviewerId], references: [id])
  feedback    Feedback[]

  @@index([employeeId, reviewDate])
  @@index([status])
  @@index([department])

  @@index([employeeId, reviewDate])
  @@index([status])
  @@index([department])
}

model Feedback {
  id          String    @id @default(cuid())
  reviewId    String
  providerId  String
  content     String
  rating      Int?
  createdAt   DateTime  @default(now())
  review      PerformanceReview @relation(fields: [reviewId], references: [id])
  provider    Employee  @relation(fields: [providerId], references: [id])
}

model SafetyIncident {
  id          String    @id @default(cuid())
  reporterId  String
  type        String
  severity    String
  description String
  location    String
  dateOccurred DateTime
  status      String    @default("OPEN")
  resolution  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reporter    Employee  @relation(fields: [reporterId], references: [id])

  @@index([status])
  @@index([dateOccurred])
}

model TrainingCertification {
  id          String    @id @default(cuid())
  employeeId  String
  courseId    String
  certificationNumber String?
  issueDate   DateTime
  expiryDate  DateTime?
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    Employee  @relation(fields: [employeeId], references: [id])
  course      TrainingCourse @relation(fields: [courseId], references: [id])

  @@index([employeeId, status])
  @@index([expiryDate])
}

model TrainingCourse {
  id          String    @id @default(cuid())
  name        String
  description String?
  duration    Int
  required    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  certifications TrainingCertification[]
}

model TrainingRecord {
  id          String    @id @default(cuid())
  employeeId  String
  courseName  String
  completedAt DateTime
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employee    Employee  @relation(fields: [employeeId], references: [id])
}
model EmployeeStatusHistory {
  id          String    @id @default(cuid())
  employeeId  String
  status      String
  reason      String?
  effectiveDate DateTime
  createdAt   DateTime  @default(now())
  employee    Employee  @relation(fields: [employeeId], references: [id])
}

model DepartmentHistory {
  id          String    @id @default(cuid())
  employeeId  String
  departmentId String
  startDate   DateTime
  endDate     DateTime?
  reason      String?
  employee    Employee  @relation(fields: [employeeId], references: [id])
  department  Department @relation(fields: [departmentId], references: [id])
}
model AuditLog {
  id          String   @id @default(cuid())
  employeeId  String
  action      String
  details     Json
  performedBy String
  timestamp   DateTime @default(now())
  employee    Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([timestamp])
}
model SkillAssessment {
  id          String   @id @default(cuid())
  employeeId  String
  skillName   String
  level       Int      @default(1)
  assessedAt  DateTime @default(now())
  assessedBy  String
  notes       String?
  employee    Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
}
